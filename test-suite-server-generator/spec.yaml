swagger: "2.0"
info:
  version: 1.0.0
  title: Compute API
  description: API for the Compute Service
host: localhost:8000
basePath: /api
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json

x-headers:
  PageNumberHeader: &X-Page-Number-header
    name: X-Page-Number
    type: string
    description: The page number of the current page
  PageSizeHeader: &X-Page-Size-header
    name: X-Page-Size
    type: string
    description: The number of items per page
  TotalCountHeader: &X-Total-Count-header
    name: X-Total-Count
    type: string
    description: |
      The total number of items available in the entire collections, not just the items returned in the current page
  PageCountHeader: &X-Page-Count-header
    name: X-Page-Count
    type: string
    description: The total number of pages based on the page size and total count
  LastModifiedHeader: &Last-Modified-header
    name: Last-Modified
    type: string
    format: date-time
    description: The last time an entity returned with the response was modified.

paths:
  /sendPrimitives/{name}:
    get:
      operationId: sendPrimitives
      tags: [ parameters ]
      description: A method to send primitives as request parameters
      parameters:
        - name: name
          in: path
          type: string
          required: true
        - name: age
          in: query
          type: number
          required: true
        - name: height
          in: header
          type: number
          format: float
          required: true
        - name: isPositive
          in: query
          type: boolean
          required: true
      responses:
        200:
          description: Success
          schema:
            type: object
            title: SendPrimitivesResponse
            properties:
              name:
                type: string
              age:
                type: number
              height:
                type: number
                format: float
              isPositive:
                type: boolean
        default:
          $ref: '#/responses/Error'
  /sendValidatedPrimitives:
    get:
      operationId: sendValidatedPrimitives
      tags: [ parameters ]
      description: a method to send primitives with validation
      produces: [ 'text/plain' ]
      parameters:
        - name: name
          in: query
          type: string
          minLength: 3
          pattern: "[a-zA-Z]+"
        - name: age
          in: query
          type: integer
          format: int
          minimum: 10
          maximum: 200
        - name: favoriteNumber
          in: query
          type: number
          minimum: -100.5
          maximum: 100.5
        - name: height
          in: query
          type: number
          format: double
          minimum: 0.1
          maximum: 3
          exclusiveMaximum: true
          exclusiveMinimum: true
      responses:
        200:
          description: Success
          schema:
            type: string
        default:
          $ref: '#/responses/Error'
  /sendDates:
    get:
      operationId: sendDates
      tags: [ parameters ]
      description: A method to send dates as parameters
      parameters:
        - name: commitDate
          type: string
          in: query
          format: date
        - name: commitDateTime
          type: string
          in: query
          format: date-time
      responses:
        200:
          description: Success
          schema:
            type: object
            title: SendDatesResponse
            properties:
              commitDate:
                type: string
                format: date
              commitDateTime:
                type: string
                format: date-time
        default:
          $ref: '#/responses/Error'
  /sendOpcRequestId:
    get:
      operationId: sendIgnoredHeader
      tags: [ parameters ]
      description: |
        A method that takes ignored-header as a header.
        It will be ignored, this behavior is most likely used when handling is implemented in a filter.
      parameters:
        - in: header
          name: ignored-header
          type: string
      responses:
        200:
          description: Success
          schema:
            type: string
  /getIgnoredHeader:
    get:
      operationId: getIgnoredHeader
      tags: [ parameters ]
      description: |
        A method that returns a header that should be ignored.
        It will be ignored, this behavior is most likely used when it will be set in a filter.
      responses:
        200:
          description: Success
          headers:
            ignored-header:
              type: string
          schema:
            type: string
  /sendPageQuery:
    get:
      operationId: sendPageQuery
      tags: [ parameters ]
      description: A method that takes page query as its argument
      parameters:
        - $ref: '#/parameters/PageQueryParam'
        - $ref: '#/parameters/PageSizeQueryParam'
        - $ref: '#/parameters/PageSortQueryParam'
      responses:
        200:
          description: Success
          schema:
            type: string
  /sendMappedParameter:
    get:
      operationId: sendMappedParameter
      tags: [ parameters ]
      description: A method that has a header that is mapped to a custom type
      parameters:
        - $ref: '#/parameters/FilterHeader'
      responses:
        200:
          description: Success
          schema:
            type: string
  /sendValidatedCollection:
    post:
      operationId: sendValidatedCollection
      tags: [ requestBody ]
      description: A method to send a validated collection in body
      requestBody:
        content:
          'application/json':
            schema:
              name: collection
              type: array
              items:
                type: array
                items:
                  type: string
                  minLength: 3
                  pattern: "[a-zA-Z]+"
      responses:
        200:
          description: Success
  /sendSimpleModel:
    post:
      operationId: sendSimpleModel
      tags: [ requestBody ]
      description: A method to send a simple model in body
      parameters:
        - name: simpleModel
          in: body
          required: true
          schema:
            $ref: '#/definitions/SimpleModel'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/SimpleModel'
        default:
          $ref: '#/responses/Error'
  /sendListOfSimpleModels:
    post:
      operationId: sendListOfSimpleModels
      tags: [ requestBody ]
      description: A method to send a list of simple models in body
      parameters:
        - name: simpleModels
          in: body
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/SimpleModel'
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/SimpleModel'
  /sendModelWithRequiredProperties:
    post:
      operationId: sendModelWithRequiredProperties
      tags: [ requestBody ]
      description: A method to send a model with required properties
      parameters:
        - name: model
          in: body
          required: true
          schema:
            $ref: '#/definitions/ModelWithRequiredProperties'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/ModelWithRequiredProperties'
        default:
          $ref: '#/responses/Error'
  /sendDateModel:
    post:
      operationId: sendDateModel
      tags: [ requestBody ]
      description: A method to send a model with dates as properties
      parameters:
        - name: model
          in: body
          required: true
          schema:
            $ref: '#/definitions/DateModel'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/DateModel'
        default:
          $ref: '#/responses/Error'
  /sendEnum:
    post:
      operationId: sendEnum
      tags: [ requestBody ]
      description: A method to send a simple enum in body
      parameters:
        - name: color
          in: body
          required: true
          schema:
            $ref: '#/definitions/ColorEnum'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/ColorEnum'
        default:
          $ref: '#/responses/Error'
  /sendEnumList:
    post:
      operationId: sendEnumList
      tags: [ requestBody ]
      description: A method to send an enum list
      parameters:
        - name: available-colors
          in: body
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/ColorEnum'
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/ColorEnum'
        default:
          $ref: '#/responses/Error'
  /sendModelWithMapProperty:
    post:
      operationId: sendModelWithMapProperty
      tags: [ requestBody ]
      description: A method to send a model that contains maps
      parameters:
        - name: model
          in: body
          required: true
          schema:
            $ref: '#/definitions/ModelWithMapProperty'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/ModelWithMapProperty'
  /sendNestedModel:
    post:
      operationId: sendNestedModel
      tags: [ requestBody ]
      description: A method to send a model with another one nested as a property
      parameters:
        - name: model
          in: body
          required: true
          schema:
            $ref: '#/definitions/NestedModel'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/NestedModel'
        default:
          $ref: '#/responses/Error'
  /sendModelWithInnerEnum:
    post:
      operationId: sendModelWithInnerEnum
      tags: [ requestBody ]
      description: A method to send a model with an inner enum as property
      parameters:
        - name: model
          in: body
          required: true
          schema:
            $ref: '#/definitions/ModelWithInnerEnum'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/ModelWithInnerEnum'
        default:
          $ref: '#/responses/Error'
  /sendModelWithEnumList:
    post:
      operationId: sendModelWithEnumList
      tags: [ requestBody ]
      description: A method to send a model with an enum list as a property
      parameters:
        - name: model
          in: body
          required: true
          schema:
            $ref: '#/definitions/ModelWithEnumList'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/ModelWithEnumList'
        default:
          $ref: '#/responses/Error'
  /sendModelWithDiscriminator:
    put:
      operationId: sendModelWithDiscriminator
      tags: [ requestBody ]
      description: A method to send a model with discriminator in body
      parameters:
        - name: model
          in: body
          required: true
          schema:
            $ref: '#/definitions/Animal'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Animal'
  /sendFile:
    put:
      operationId: sendFile
      tags: [ requestBody ]
      description: A method to send file as a request body
      consumes: [ "multipart/form-data" ]
      parameters:
        - in: formData
          name: file
          type: file
      responses:
        200:
          description: Success
          schema:
            type: string
            format: byte
        default:
          $ref: '#/responses/Error'
  /sendBytes:
    put:
      operationId: sendBytes
      tags: [ requestBody ]
      description: A method to send bytes
      produces: [ "application/octet-stream" ]
      consumes: [ "application/octet-stream" ]
      parameters:
        - in: body
          name: bytes
          schema:
            type: string
            format: byte
      responses:
        200:
          description: Success
          schema:
            type: string
            format: byte
  /getSimpleModel:
    get:
      operationId: getSimpleModel
      tags: [ responseBody ]
      description: A method to get a simple model as a response
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/SimpleModel'
        default:
          $ref: '#/responses/Error'
  /getSimpleModelWithNonStandardStatus:
    get:
      operationId: getSimpleModelWithNonStandardStatus
      tags: [ responseBody ]
      description: A method to get a simple model as a response
      responses:
        202:
          description: Success
          schema:
            $ref: '#/definitions/SimpleModel'
        default:
          $ref: '#/responses/Error'
  /getPaginatedSimpleModel:
    get:
      operationId: getPaginatedSimpleModel
      parameters:
        - $ref: '#/parameters/PageQueryParam'
      tags: [ responseBody ]
      description: A method to get a simple model list as a paginated response
      responses:
        200:
          description: Success
          headers:
            X-Page-Number: *X-Page-Number-header
            X-Page-Size: *X-Page-Size-header
            X-Total-Count: *X-Total-Count-header
            X-Page-Count: *X-Page-Count-header
          schema:
            type: array
            items:
              $ref: '#/definitions/SimpleModel'
  /getDatedSimpleModel:
    get:
      operationId: getDatedSimpleModel
      tags: [ responseBody ]
      description: A method to get a simple model with last-modified header
      responses:
        200:
          description: Success
          headers:
            Last-Modified: *Last-Modified-header
          schema:
            $ref: '#/definitions/SimpleModel'
  /getSimpleModelWithNonMappedHeader:
    get:
      operationId: getSimpleModelWithNonMappedHeader
      tags: [ responseBody ]
      description: A method to get a simple model as a response
      responses:
        200:
          description: Success
          headers:
            custom-header:
              type: string
              description: A header with an additional description
          schema:
            $ref: '#/definitions/SimpleModel'
        default:
          $ref: '#/responses/Error'
  /getDatedSimpleModelWithNonMappedHeader:
    get:
      operationId: getDatedSimpleModelWithNonMappedHeader
      tags: [ responseBody ]
      description: A method to get a tagged simple model with non standard headers
      responses:
        200:
          description: Success
          headers:
            Last-Modified: *Last-Modified-header
            custom-header:
              type: string
              description: A custom header
          schema:
            $ref: '#/definitions/SimpleModel'
  /getErrorResponse:
    get:
      operationId: getErrorResponse
      tags: [ responseBody ]
      description: A method throwing an error response
      responses:
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
  /getFile:
    get:
      operationId: getFile
      tags: [ responseBody ]
      description: A method to get file as a response body
      produces: [ "text/plain" ]
      responses:
        200:
          description: Success
          schema:
            type: file
        default:
          $ref: '#/responses/Error'

definitions:
  SimpleModel:
    type: object
    properties:
      color:
        type: string
        minLength: 2
      numEdges:
        minimum: 1
        type: integer
        format: int64
      area:
        minimum: 0
        exclusiveMinimum: true
        type: number
        format: float
      exactArea:
        minimum: 0
        exclusiveMinimum: true
        type: number
      convex:
        type: boolean
      points:
        type: array
        minItems: 3
        items:
          type: string
      state:
        $ref: '#/definitions/StateEnum'
  ModelWithRequiredProperties:
    type: object
    properties:
      species:
        type: string
      weight:
        type: number
        format: float
      numRepresentatives:
        type: integer
        format: int32
      description:
        type: string
    required: [species, weight]
  DateModel:
    type: object
    properties:
      commitDate:
        type: string
        format: date
      commitDateTime:
        type: string
        format: date-time
  NestedModel:
    type: object
    properties:
      simpleModel:
        $ref: '#/definitions/SimpleModel'
      additionalInfo:
        type: string
  ModelWithInnerEnum:
    type: object
    properties:
      species-name:
        type: string
      num-representatives:
        type: integer
        format: int64
      mammal-order:
        title: MammalOrder
        type: string
        enum: [ monotreme, marsupial, placental ]
  ModelWithEnumList:
    type: object
    properties:
      favoriteColors:
        type: array
        items:
          $ref: '#/definitions/ColorEnum'
  ModelWithMapProperty:
    type: object
    properties:
      map:
        type: object
        additionalProperties:
          type: string
      deepMap:
        type: object
        additionalProperties:
          type: object
          additionalProperties:
            minLength: 2
            type: string
      deepObjectMap:
        type: object
        additionalProperties:
          type: object
          additionalProperties:
            type: object
            $ref: '#/definitions/SimpleModel'
  StateEnum:
    type: string
    enum: ['starting', 'running', 'stopped', 'deleted']
  Animal:
    type: object
    discriminator: class
    properties:
      class:
        type: string
      color:
        $ref: '#/definitions/ColorEnum'
  Bird:
    type: object
    allOf:
      - $ref: '#/definitions/Animal'
      - discriminator: ave
        properties:
          numWings:
            type: integer
            format: int32
          beakLength:
            type: number
          featherDescription:
            type: string
  Mammal:
    type: object
    required: [ weight, description ]
    allOf:
      - $ref: '#/definitions/Animal'
      - discriminator: mammalia
        properties:
          weight:
            type: number
            format: float
          description:
            type: string
  Reptile:
    type: object
    required: [numLegs, fangs]
    allOf:
      - $ref: '#/definitions/Animal'
      - discriminator: reptilia
        properties:
          numLegs:
            type: integer
          fangs:
            type: boolean
          fangDescription:
            type: string
  ColorEnum:
    type: string
    enum: ['red', 'blue', 'green', 'light-blue', 'dark-green']
  ProxyFleetSummary:
    type: object
    description: proxy fleet summary object
    properties:
      proxyFleetName:
        type: string
        description: The unique name of the splat proxy fleet.
      compartmentId:
        type: string
        description: The compartment id
      location:
        type: string
        description: the location of the fleet, SUBSTRATE/OVERLAY
        enum: [SUBSTRATE, OVERLAY]
      lifecycleState:
        type: string
        description: the status of the fleet, ACTIVE/DELETED
        enum: [ACTIVE, DELETED]
      services:
        type: array
        description: an array of service names on the fleet
        items:
          type: string
  Error:
    type: object
    description: An object for describing errors
    properties:
      message:
        type: string
        description: The error message

parameters:
  PageQueryParam:
    name: page
    in: query
    type: integer
    minimum: 0
    default: 0
    description: The page number to retrieve starting from 0.
  PageSizeQueryParam:
    name: size
    in: query
    type: integer
    minimum: 1
    default: 10
    description: The number of items per page.
  PageSortQueryParam:
    name: sortOrder
    in: query
    type: string
    description: |
      Parameter describing the sort. Allows specifying the sorting direction using the keywords {@code asc} and
      {@code desc} after each property. For example, {@code "sort=name desc,age"} will sort by name in descending
      order and age in ascending.
  FilterHeader:
    name: Filter
    in: header
    type: string
    description: |
      A filter parameter that allows filtering the response. The conditions are comma separated and
      must be of type [property][comparator][value] where comparator is one of =, < and >.

responses:
  Error:
    description: An unexpected error has occurred
  400:
    description: Bad Request
  401:
    description: Unauthorized
  404:
    description: Not Found
  500:
    description: Internal Server Error
  default:
    description: Unknown Error
