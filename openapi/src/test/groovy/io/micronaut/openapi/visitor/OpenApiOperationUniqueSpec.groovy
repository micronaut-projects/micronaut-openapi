package io.micronaut.openapi.visitor

import io.micronaut.openapi.AbstractOpenApiTypeElementSpec
import io.swagger.v3.oas.models.Operation

class OpenApiOperationUniqueSpec extends AbstractOpenApiTypeElementSpec {

    void "test OpenAPI does not append number if all operations are unique"() {
        given:
        buildBeanDefinition('test.MyBean', '''

package test;

import io.micronaut.http.annotation.*;
import java.util.List;

@Controller("/test1")
class TestController {
    @Get("/")
    String index() {
        return "Hello World";
    }
}

@Controller("/test2")
class TestController2 {
    @Get("/")
    String otherIndex() {
        return "Hello World";
    }
}

@jakarta.inject.Singleton
class MyBean {}
''')

        Operation firstOperation = AbstractOpenApiVisitor.testReference?.paths?.get("/test1")?.get
        Operation secondOperation = AbstractOpenApiVisitor.testReference?.paths?.get("/test2")?.get

        expect:
        firstOperation.getOperationId() == "index"
        firstOperation.responses["200"].description == "index 200 response"
        secondOperation.getOperationId() == "otherIndex"
        secondOperation.responses["200"].description == "otherIndex 200 response"
    }

    void "test OpenAPI generates unique operation ids"() {
        given:
        buildBeanDefinition('test.MyBean', '''

package test;

import io.micronaut.http.annotation.*;
import java.util.List;

@Controller("/test1")
class TestController {
    @Get("/")
    String index() {
        return "Hello World";
    }
}

@Controller("/test2")
class TestController2 {
    @Get("/")
    String index() {
        return "Hello World";
    }
}

@jakarta.inject.Singleton
class MyBean {}
''')

        Operation firstOperation = AbstractOpenApiVisitor.testReferenceAfterPlaceholders?.paths?.get("/test1")?.get
        Operation secondOperation = AbstractOpenApiVisitor.testReferenceAfterPlaceholders?.paths?.get("/test2")?.get

        expect:
        firstOperation.getOperationId() == "index"
        firstOperation.responses["200"].description == "index 200 response"
        secondOperation.getOperationId() == "index_1"
        secondOperation.responses["200"].description == "index_1 200 response"
    }

    void "test OpenAPI uses operationId from @Operation annotation if there is no conflict"() {
        given:
        buildBeanDefinition('test.MyBean', '''

package test;

import io.swagger.v3.oas.annotations.*;
import io.micronaut.http.annotation.*;
import java.util.List;

@Controller("/test1")
class TestController {
    @Get("/")
    String index() {
        return "Hello World";
    }
}

@Controller("/test2")
class TestController2 {
    @Get("/")
    @Operation(operationId = "custom-operationId")
    String index() {
        return "Hello World";
    }
}

@jakarta.inject.Singleton
class MyBean {}
''')

        Operation operationWithGeneratedId = AbstractOpenApiVisitor.testReference?.paths?.get("/test1")?.get
        Operation operationWithUserId = AbstractOpenApiVisitor.testReference?.paths?.get("/test2")?.get

        expect:
        operationWithGeneratedId.getOperationId() == "index"
        operationWithGeneratedId.responses["200"].description == "index 200 response"
        operationWithUserId.getOperationId() == "custom-operationId"
        operationWithUserId.responses["200"].description == "custom-operationId 200 response"
    }

    void "test OpenAPI generates unique operation ids when conflicts from autogenerated values and keeps value from @Operation annotation"() {
        given:
        buildBeanDefinition('test.MyBean', '''

package test;

import io.swagger.v3.oas.annotations.*;
import io.micronaut.http.annotation.*;
import java.util.List;

@Controller("/test1")
class TestController {
    @Get("/")
    String index() {
        return "Hello World";
    }
}

@Controller("/test2")
class TestController2 {
    @Get("/")
    @Operation(operationId = "indexGet1")
    String index() {
        return "Hello World";
    }
}

@Controller("/test3")
class TestController3 {
    @Get("/")
    String index() {
        return "Hello World";
    }
}

@jakarta.inject.Singleton
class MyBean {}
''')

        Operation firstGenerated = AbstractOpenApiVisitor.testReferenceAfterPlaceholders?.paths?.get("/test1")?.get
        Operation operationWithId = AbstractOpenApiVisitor.testReferenceAfterPlaceholders?.paths?.get("/test2")?.get
        Operation secondGenerated = AbstractOpenApiVisitor.testReferenceAfterPlaceholders?.paths?.get("/test3")?.get

        expect:
        firstGenerated.getOperationId() == "index"
        firstGenerated.responses["200"].description == "index 200 response"
        operationWithId.getOperationId() == "indexGet1"
        operationWithId.responses["200"].description == "indexGet1 200 response"
        secondGenerated.getOperationId() == "index_1"
        secondGenerated.responses["200"].description == "index_1 200 response"
    }

    void "test OpenAPI generates unique operation ids even when conflict when using @Operation annotation"() {
        given:
        buildBeanDefinition('test.MyBean', '''

package test;

import io.swagger.v3.oas.annotations.*;
import io.micronaut.http.annotation.*;
import java.util.List;

@Controller("/test1")
class TestController {
    @Get("/")
    @Operation(operationId = "myIndex")
    String index() {
        return "Hello World";
    }
}

@Controller("/test2")
class TestController2 {
    @Get("/")
    @Operation(operationId = "myIndex")
    String otherIndex() {
        return "Hello World";
    }
}

@jakarta.inject.Singleton
class MyBean {}
''')

        Operation firstOperation = AbstractOpenApiVisitor.testReferenceAfterPlaceholders?.paths?.get("/test1")?.get
        Operation secondOperation = AbstractOpenApiVisitor.testReferenceAfterPlaceholders?.paths?.get("/test2")?.get

        expect:
        firstOperation.getOperationId() == "myIndex"
        firstOperation.responses["200"].description == "myIndex 200 response"
        secondOperation.getOperationId() == "myIndex_1"
        secondOperation.responses["200"].description == "myIndex_1 200 response"
    }

}
